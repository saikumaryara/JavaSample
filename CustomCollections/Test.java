public class Test {
	public static void main(String[] args) {
		// I want to store multiple values or multiple objects
		// without type and size limitation
		NITCollection col = new NITCollection();
		System.out.println(col);
		System.out.println(col.size());

		System.out.println(col.capacity());
		col.add("a");
		System.out.println(col);

		col.add("b");
		System.out.println(col);
		col.add(5);
		System.out.println(col);
		col.add(6.7);
		System.out.println(col);
		col.add('p');
		System.out.println(col);
		col.add(true);
		System.out.println(col);
		col.add("a");
		System.out.println(col);
		col.add(5);
		System.out.println(col);
		col.add(6.7);
		System.out.println(col);
		col.add(true);
		System.out.println(col);
		col.add(11);
		System.out.println(col);
		col.add(new A(5, 6));
		System.out.println(col);
		col.add(null);
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();
		System.out.println(col.contains("a"));
		System.out.println(col.contains(true));
		System.out.println(col.contains(null));
		System.out.println(col.contains("A"));
		System.out.println(col.contains(new A(5, 6)));
		System.out.println();
		System.out.println(col.indexOf("a"));
		System.out.println(col.indexOf(5));
		System.out.println(col.indexOf(null));
		System.out.println(col.indexOf(new A(5, 6)));
		int index = col.indexOf('p');
		System.out.println(index);
		System.out.println(col.indexOf("A"));
		System.out.println(col.lastIndexOf("a"));
		System.out.println(col.lastIndexOf(5));
		System.out.println();
		index = col.indexOf(new A(5, 6));
		A a = (A) col.get(index);
		System.out.println(a.getX());
		System.out.println(a.getY());
		a.setX(10);
		a.setY(20);
		System.out.println(a.getX());
		System.out.println(a.getY());
		System.out.println(col);
		System.out.println(col.get(4));
		// System.out.println(col.get(-4));
		// System.out.println(col.get(15));
		System.out.println();
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println(col);
		col.remove(3);
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		col.remove(5);
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();
		col.remove((Integer) 5);
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();
		col.remove(6.7);
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println(); // col.remove('p'); col.remove((Character)'p');
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();
		col.remove(new A(10, 20));
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();
		col.add("c", 3);
		col.add("d", 3);
		col.add("e", 3);
		col.add("f", 3);
		col.add("g", 3);
		col.add("i", 3);
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();
		col.set(3, "W");
		System.out.println(col);
		System.out.println(col.size());
		System.out.println(col.capacity());
		System.out.println();

	}
}